package main

import (
	"bytes"
	"encoding/hex"
	"game-server/models"
	"strings"
)

func main() {
	test()
	// srv := server.NewServer()
	// err := srv.Start()
	// if err != nil {
	// 	log.Err(err)
	// }
}

func parse_input(data []byte) {
	buffer := bytes.NewBuffer(data)
	for buffer.Len() > 0 {
		dataPacket := &models.DataPacket{}
		err := dataPacket.Parse(buffer)
		if err != nil {
			panic(err)
		}
		// fmt.Printf("Parsed packet: %v\n", dataPacket)
	}
}

func hexStringToByteArray(s string) ([]byte, error) {
	parts := strings.Split(s, "-")

	bytes := make([]byte, len(parts))

	for i, part := range parts {
		byteVal, err := hex.DecodeString(part)
		if err != nil {
			return nil, err
		}
		bytes[i] = byteVal[0]
	}

	return bytes, nil
}

func test() {
	data := "56-03-BF-00-01-53-03-78-DA-B5-95-59-68-D4-40-18-C7-67-2B-78-21-58-B5-B8-0B-F5-42-ED-93-07-93-64-92-C9-6C-77-9B-98-59-8B-7D-B1-28-C5-A3-1E-98-64-12-15-45-A5-EA-83-2F-DA-22-D6-0B-04-B1-5A-41-D4-15-D1-87-E2-85-DB-62-B7-AD-DA-AE-20-56-54-D0-07-0F-10-3C-10-95-55-BC-45-EB-55-93-DD-55-14-CC-BA-C5-3A-10-C2-4C-E0-CB-EF-FB-7F-FF-EF-9B-41-00-80-22-70-03-21-7A-79-DE-72-B5-F1-4C-11-6D-ED-D8-4A-87-AE-DE-AF-F9-BB-B6-D3-80-24-61-64-E8-C8-92-05-9B-63-10-49-B6-0D-99-21-31-3D-20-32-5E-10-0D-C4-64-C9-C6-18-F1-16-E4-B0-61-CA-B2-EE-73-E2-B9-4F-0F-56-77-77-11-28-1F-BD-57-1B-5F-FF-4E-DD-75-E2-65-FB-F4-67-C1-70-4B-F7-13-6D-AE-3D-38-F4-67-00-5D-80-01-11-0B-08-33-02-79-24-12-87-00-C9-36-36-B0-2D-89-19-00-F7-35-04-80-31-5A-F6-7F-4F-2C-06-ED-B5-04-54-8F-27-2E-C5-23-AE-F2-82-32-62-76-68-7E-DD-A6-8E-99-67-47-2A-F4-5C-73-68-6D-64-8C-EA-41-C1-B3-80-28-21-62-31-0E-22-83-99-3C-13-18-67-CA-06-12-65-23-8B-0C-EE-F1-40-53-AF-5A-53-B5-94-2D-B6-56-BB-5B-AF-F8-96-13-5F-94-18-36-85-74-7C-C2-38-92-8A-8F-0B-72-97-79-EC-B8-68-4B-FF-39-8B-E3-9B-17-7D-95-DD-24-1B-4A-2F-69-77-C1-61-65-F7-9E-5B-89-27-1F-63-B4-B0-3B-46-F9-19-E7-BD-A4-E6-65-57-6A-CC-DB-A6-98-96-5A-22-44-C6-98-37-75-2E-F7-24-F3-B2-24-49-9C-24-99-6D-23-CB-64-3C-E6-A1-21-DA-A2-EE-26-29-C9-A1-BF-27-E9-15-54-FF-97-A0-3F-D6-C0-7B-24-58-F6-71-69-70-C1-00-1A-74-95-1B-94-1C-1C-29-AF-4B-AA-EB-92-CB-13-6F-BE-C5-E8-9D-AE-7E-DA-A6-55-C9-B0-17-04-0A-88-04-9A-A2-B3-49-77-09-27-10-82-75-D3-D6-8D-DF-4D-5A-AD-64-A3-F0-81-68-0B-C8-1F-5E-0C-A2-FE-36-97-A2-73-ED-0C-1A-46-CF-D4-9A-AA-6D-1D-91-CF-4D-E1-C7-5D-D7-B5-B3-1F-EA-3D-29-78-A7-57-21-8F-B1-6C-65-7A-15-0A-16-66-16-33-AC-5F-28-FC-00-44-D5-EC-6A-3C-8D-FB-16-6D-08-02-50-1B-77-29-6A-77-8C-A2-A5-4D-9D-4A-D9-B1-F9-89-9D-47-4E-D3-FB-9D-AB-E8-C3-FD-A7-A8-17-45-A6-61-5D-27-A5-5C-24-60-DB-F9-8A-4D-0E-F5-44-8B-F4-5A-8F-7F-8C-8D-57-6D-97-B4-83-C6-21-25-5A-7A-33-71-A5-4F-43-B8-FD-F3-32-6D-D2-EC-A3-5E-5A-70-56-AF-68-E1-03-CF-33-5A-6C-49-69-F1-66-5F-7E-64-C5-94-3B-EA-DC-01-53-13-B7-97-C4-68-4D-4D-7D-B8-35-EF-A2-E2-45-61-A4-3A-4A-80-10-FD-EC-28-C4-33-51-87-5C-AF-8C-0D-CE-F4-34-FF-A8-DC-CD-3F-62-C2-AC-78-45-C1-CC-38-A8-D8-52-EC-26-B9-E7-D8-49-6D-43-9E-5F-2D-AA-C8-BF-E0-5F-52-58-D2-E7-FD-71-CD-B7-F3-75-89-17-84-33-36-9C-23-4E-84-D8-D2-A1-8E-4D-C4-11-93-B7-89-C1-48-8E-57-84-0F-C8-71-50-FD-B4-D9-F1-44-AA-FB-1E-4C-2D-A7-D7-0E-BC-50-AE-5E-FB-94-28-8B-17-86-B7-9D-9B-D6-9A-6C-F4-9C-5B-9C-94-76-9C-6C-98-19-C7-C9-10-F2-A6-C4-E1-5F-AF-88-61-7F-A3-98-5C-19-6D-1B-B7-B1-6F-C9-9A-4A-92-A2-88-BD-9D-4E-EB-50-9E-BA-F0-F8-97-C4-D7-BB-FD-94-95-78-57-E8-C6-9C-6A-4F-0A-E1-3F-D7-1A-F5-66-AD-1B-99-5B-EB-EF-57-C2-C6-E2"
	b, _ := hexStringToByteArray(data)
	// b := []byte{0x41, 0x04, 0x97, 0x00, 0x09, 0x00, 0x0B, 0x00, 0x45, 0x58, 0x46, 0x49, 0x4C, 0x5F, 0x5A, 0x42, 0x30, 0x31, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x44, 0x6F, 0x72, 0x6D, 0x73, 0x20, 0x56, 0x2D, 0x45, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x5A, 0x42, 0x2D, 0x31, 0x30, 0x31, 0x31, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x43, 0x72, 0x6F, 0x73, 0x73, 0x72, 0x6F, 0x61, 0x64, 0x73, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x4F, 0x6C, 0x64, 0x20, 0x47, 0x61, 0x73, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x54, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x50, 0x61, 0x72, 0x6B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x52, 0x55, 0x41, 0x46, 0x20, 0x52, 0x6F, 0x61, 0x64, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x53, 0x6D, 0x75, 0x67, 0x67, 0x6C, 0x65, 0x72, 0x27, 0x73, 0x20, 0x42, 0x6F, 0x61, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x5A, 0x42, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x00, 0x00, 0x00, 0x99, 0x14, 0x20, 0xBB, 0x02, 0xFE, 0x9F, 0x78, 0x18, 0x02, 0xCF, 0xFD, 0x6E, 0x00, 0x02, 0x34, 0x89, 0xC7, 0x5D, 0x02, 0x05, 0xE7, 0xBD, 0x45, 0x02, 0x6A, 0x72, 0x16, 0xA3, 0x02, 0x3B, 0xD0, 0x0C, 0x8B, 0x02, 0xA0, 0x5B, 0x65, 0xE8, 0x02, 0xC1, 0x6F, 0xE4, 0xA5, 0x02, 0x26, 0xFB, 0x3C, 0x03, 0x02, 0x98, 0x14, 0x20, 0xBB, 0x02, 0xFD, 0x9F, 0x78, 0x18, 0x02, 0xCE, 0xFD, 0x6E, 0x00, 0x02, 0x04, 0xE7, 0xBD, 0x45, 0x02, 0x69, 0x72, 0x16, 0xA3, 0x02, 0x3A, 0xD0, 0x0C, 0x8B, 0x02, 0x9F, 0x5B, 0x65, 0xE8, 0x02, 0xC0, 0x6F, 0xE4, 0xA5, 0x02, 0x25, 0xFB, 0x3C, 0x03, 0x02, 0x97, 0x14, 0x20, 0xBB, 0x02, 0xCD, 0xFD, 0x6E, 0x00, 0x02, 0x32, 0x89, 0xC7, 0x5D, 0x02, 0x03, 0xE7, 0xBD, 0x45, 0x02, 0x68, 0x72, 0x16, 0xA3, 0x02, 0x39, 0xD0, 0x0C, 0x8B, 0x02, 0x9E, 0x5B, 0x65, 0xE8, 0x02, 0xBF, 0x6F, 0xE4, 0xA5, 0x02, 0x24, 0xFB, 0x3C, 0x03, 0x02, 0x96, 0x14, 0x20, 0xBB, 0x02, 0xFB, 0x9F, 0x78, 0x18, 0x02, 0xCC, 0xFD, 0x6E, 0x00, 0x02, 0x38, 0xD0, 0x0C, 0x8B, 0x02, 0x9D, 0x5B, 0x65, 0xE8, 0x02, 0xBE, 0x6F, 0xE4, 0xA5, 0x02, 0x23, 0xFB, 0x3C, 0x03, 0x02, 0x9D, 0x14, 0x20, 0xBB, 0x02, 0x02, 0xA0, 0x78, 0x18, 0x02, 0xD3, 0xFD, 0x6E, 0x00, 0x02, 0x38, 0x89, 0xC7, 0x5D, 0x02, 0x09, 0xE7, 0xBD, 0x45, 0x02, 0x3F, 0xD0, 0x0C, 0x8B, 0x02, 0xA4, 0x5B, 0x65, 0xE8, 0x02, 0x2A, 0xFB, 0x3C, 0x03, 0x02, 0x9C, 0x14, 0x20, 0xBB, 0x02, 0x01, 0xA0, 0x78, 0x18, 0x03, 0xD2, 0xFD, 0x6E, 0x00, 0x03, 0x37, 0x89, 0xC7, 0x5D, 0x02, 0x08, 0xE7, 0xBD, 0x45, 0x02, 0x6D, 0x72, 0x16, 0xA3, 0x02, 0x3E, 0xD0, 0x0C, 0x8B, 0x03, 0xA3, 0x5B, 0x65, 0xE8, 0x02, 0xC4, 0x6F, 0xE4, 0xA5, 0x02, 0x29, 0xFB, 0x3C, 0x03, 0x02, 0x9B, 0x14, 0x20, 0xBB, 0x02, 0x00, 0xA0, 0x78, 0x18, 0x02, 0xD1, 0xFD, 0x6E, 0x00, 0x02, 0x36, 0x89, 0xC7, 0x5D, 0x02, 0x07, 0xE7, 0xBD, 0x45, 0x02, 0x6C, 0x72, 0x16, 0xA3, 0x02, 0x3D, 0xD0, 0x0C, 0x8B, 0x02, 0xA2, 0x5B, 0x65, 0xE8, 0x02, 0xC3, 0x6F, 0xE4, 0xA5, 0x02, 0x28, 0xFB, 0x3C, 0x03, 0x02, 0x9A, 0x14, 0x20, 0xBB, 0x02, 0xFF, 0x9F, 0x78, 0x18, 0x02, 0xD0, 0xFD, 0x6E, 0x00, 0x02, 0x35, 0x89, 0xC7, 0x5D, 0x02, 0x06, 0xE7, 0xBD, 0x45, 0x02, 0x6B, 0x72, 0x16, 0xA3, 0x02, 0x3C, 0xD0, 0x0C, 0x8B, 0x02, 0xA1, 0x5B, 0x65, 0xE8, 0x02, 0xC2, 0x6F, 0xE4, 0xA5, 0x02, 0x27, 0xFB, 0x3C, 0x03, 0x02, 0x91, 0x14, 0x20, 0xBB, 0x02, 0xF6, 0x9F, 0x78, 0x18, 0x02, 0xC7, 0xFD, 0x6E, 0x00, 0x02, 0x2C, 0x89, 0xC7, 0x5D, 0x02, 0xFD, 0xE6, 0xBD, 0x45, 0x02, 0x62, 0x72, 0x16, 0xA3, 0x02, 0x33, 0xD0, 0x0C, 0x8B, 0x02, 0x98, 0x5B, 0x65, 0xE8, 0x02, 0xB9, 0x6F, 0xE4, 0xA5, 0x02, 0x1E, 0xFB, 0x3C, 0x03, 0x02, 0x90, 0x14, 0x20, 0xBB, 0x02, 0xC6, 0xFD, 0x6E, 0x00, 0x04, 0x2B, 0x89, 0xC7, 0x5D, 0x02, 0xFC, 0xE6, 0xBD, 0x45, 0x02, 0x61, 0x72, 0x16, 0xA3, 0x04, 0x32, 0xD0, 0x0C, 0x8B, 0x02, 0x97, 0x5B, 0x65, 0xE8, 0x02, 0xB8, 0x6F, 0xE4, 0xA5, 0x02, 0x1D, 0xFB, 0x3C, 0x03, 0x02, 0x5E, 0x33, 0x67, 0x6D, 0x02, 0xF9, 0xA7, 0x0E, 0x10, 0x02, 0x94, 0x1C, 0xB6, 0xB2, 0x02, 0x2F, 0x91, 0x5D, 0x55, 0x02, 0xCA, 0x05, 0x05, 0xF8, 0x02, 0x65, 0x7A, 0xAC, 0x9A, 0x02, 0x00, 0xEF, 0x53, 0x3D, 0x02, 0x9B, 0x63, 0xFB, 0xDF, 0x02, 0x86, 0x8E, 0x2B, 0x58, 0x02, 0x21, 0x03, 0xD3, 0xFA, 0x02, 0x5D, 0x33, 0x67, 0x6D, 0x02, 0xF8, 0xA7, 0x0E, 0x10, 0x02, 0x93, 0x1C, 0xB6, 0xB2, 0x02, 0x2E, 0x91, 0x5D, 0x55, 0x02, 0xC9, 0x05, 0x05, 0xF8, 0x02, 0x64, 0x7A, 0xAC, 0x9A, 0x02, 0xFF, 0xEE, 0x53, 0x3D, 0x02, 0x9A, 0x63, 0xFB, 0xDF, 0x02, 0x85, 0x8E, 0x2B, 0x58, 0x02, 0x20, 0x03, 0xD3, 0xFA, 0x02, 0x5C, 0x33, 0x67, 0x6D, 0x02, 0xF7, 0xA7, 0x0E, 0x10, 0x02, 0x92, 0x1C, 0xB6, 0xB2, 0x02, 0x2D, 0x91, 0x5D, 0x55, 0x02, 0xC8, 0x05, 0x05, 0xF8, 0x02, 0x63, 0x7A, 0xAC, 0x9A, 0x02, 0xFE, 0xEE, 0x53, 0x3D, 0x02, 0x99, 0x63, 0xFB, 0xDF, 0x02, 0x84, 0x8E, 0x2B, 0x58, 0x02, 0x1F, 0x03, 0xD3, 0xFA, 0x02, 0xF6, 0xA7, 0x0E, 0x10, 0x02, 0x91, 0x1C, 0xB6, 0xB2, 0x02, 0x2C, 0x91, 0x5D, 0x55, 0x02, 0xC7, 0x05, 0x05, 0xF8, 0x02, 0x62, 0x7A, 0xAC, 0x9A, 0x02, 0xFD, 0xEE, 0x53, 0x3D, 0x02, 0x98, 0x63, 0xFB, 0xDF, 0x02, 0x83, 0x8E, 0x2B, 0x58, 0x02, 0x1E, 0x03, 0xD3, 0xFA, 0x02, 0x62, 0x33, 0x67, 0x6D, 0x02, 0xFD, 0xA7, 0x0E, 0x10, 0x02, 0x98, 0x1C, 0xB6, 0xB2, 0x02, 0x33, 0x91, 0x5D, 0x55, 0x02, 0xCE, 0x05, 0x05, 0xF8, 0x02, 0x69, 0x7A, 0xAC, 0x9A, 0x02, 0x04, 0xEF, 0x53, 0x3D, 0x02, 0x9F, 0x63, 0xFB, 0xDF, 0x02, 0x8A, 0x8E, 0x2B, 0x58, 0x02, 0x25, 0x03, 0xD3, 0xFA, 0x02, 0xF7, 0x90, 0xEC, 0x06, 0x03, 0x92, 0x05, 0x94, 0xA9, 0x03, 0xC1, 0xA7, 0x9D, 0xC1, 0x03, 0x5C, 0x1C, 0x45, 0x64, 0x03, 0x55, 0xD5, 0xFF, 0x36, 0x03, 0x26, 0x33, 0xF6, 0x1E, 0x03, 0x8B, 0xBE, 0x4E, 0x7C, 0x03, 0x6A, 0xAA, 0xCF, 0xBE, 0x03, 0xCF, 0x35, 0x28, 0x1C, 0x03, 0xF0, 0x49, 0xA7, 0xD9, 0x03, 0xF8, 0x90, 0xEC, 0x06, 0x03, 0x93, 0x05, 0x94, 0xA9, 0x03, 0xC2, 0xA7, 0x9D, 0xC1, 0x03, 0x5D, 0x1C, 0x45, 0x64, 0x03, 0x8C, 0xBE, 0x4E, 0x7C, 0x03, 0x27, 0x33, 0xF6, 0x1E, 0x03, 0x56, 0xD5, 0xFF, 0x36, 0x03, 0xF1, 0x49, 0xA7, 0xD9, 0x03, 0xD0, 0x35, 0x28, 0x1C, 0x03, 0x6B, 0xAA, 0xCF, 0xBE, 0x03, 0xF5, 0x90, 0xEC, 0x06, 0x03, 0x90, 0x05, 0x94, 0xA9, 0x03, 0xBF, 0xA7, 0x9D, 0xC1, 0x03, 0x5A, 0x1C, 0x45, 0x64, 0x03, 0x89, 0xBE, 0x4E, 0x7C, 0x03, 0x24, 0x33, 0xF6, 0x1E, 0x03, 0x53, 0xD5, 0xFF, 0x36, 0x03, 0xEE, 0x49, 0xA7, 0xD9, 0x03, 0xCD, 0x35, 0x28, 0x1C, 0x03, 0x68, 0xAA, 0xCF, 0xBE, 0x03, 0xF6, 0x90, 0xEC, 0x06, 0x03, 0x91, 0x05, 0x94, 0xA9, 0x03, 0xC0, 0xA7, 0x9D, 0xC1, 0x03, 0x5B, 0x1C, 0x45, 0x64, 0x03, 0x06, 0xC8, 0xE8, 0xE9, 0x02, 0x05, 0xC8, 0xE8, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	parse_input(b)

	// x := &response.WorldSpawn{}
	// x.GetDefault()
	// fmt.Printf("WorldSpawn: %v\n", x)
}
