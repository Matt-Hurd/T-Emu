package main

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"game-server/models"
	"strings"
)

func main() {
	test()
	// srv := server.NewServer()
	// err := srv.Start()
	// if err != nil {
	// 	log.Err(err)
	// }
}

func parse_input(data []byte) {
	buffer := bytes.NewBuffer(data)
	for buffer.Len() > 0 {
		dataPacket := &models.DataPacket{}
		err := dataPacket.Parse(buffer)
		if err != nil {
			panic(err)
		}
		newBuf := dataPacket.Write()
		newBuf2 := dataPacket.Write()
		if !bytes.Equal(newBuf, newBuf2) {
			fmt.Printf("Equals: %t\n", bytes.Equal(newBuf, newBuf2))
			diff, err := byteDiff(newBuf, newBuf2)
			if err != nil {
				fmt.Println(err)
			}
			for i, d := range diff {
				if d != 0 && i < 100 {
					fmt.Printf("differs at %d, expected %d, got %d\n", i, data[i], newBuf[i])
				}
			}
		}
	}
}

func byteDiff(bs1, bs2 []byte) ([]int16, error) {
	if (bs1 == nil) || (bs2 == nil) {
		return nil, fmt.Errorf("expected a byte slice but got nil")
	}
	if len(bs1) != len(bs2) {
		return nil, fmt.Errorf("mismatched lengths, %d != %d", len(bs1), len(bs2))
	}

	diff := make([]int16, len(bs1))
	for i := range bs1 {
		diff[i] = int16(bs1[i]) - int16(bs2[i])
	}
	return diff, nil
}

func hexStringToByteArray(s string) ([]byte, error) {
	parts := strings.Split(s, "-")

	bytes := make([]byte, len(parts))

	for i, part := range parts {
		byteVal, err := hex.DecodeString(part)
		if err != nil {
			return nil, err
		}
		bytes[i] = byteVal[0]
	}

	return bytes, nil
}

// func test() {
// 	for i := 0; i < 100; i++ {
// 		searchLoot := core.SearchLoot{
// 			Flag:   false,
// 			Id:     "6674ba4e83f1d046ff0daf97",
// 			States: map[string]enums.SearchedState{},
// 			Grids: []core.GClass1406{
// 				{
// 					Flag: false,
// 					Id:   "main",
// 					KnownItems: map[string][]string{
// 						"664ec4bbed6f21853f111a29": []string{},
// 					},
// 				},
// 			},
// 		}
// 		newBuffer := bytes.NewBuffer([]byte{})
// 		limitedWriter := helpers.NewLimitedWriter(newBuffer)
// 		searchLoot.Serialize(limitedWriter)
// 		searchLoot.Serialize(limitedWriter)

// 		limitedWriter.Write(int32(5))

// 		limitedWriter.Write(true)

// 		limitedWriter.Write(int32(3))

// 		limitedWriter.FlushBits()
// 		limitedWriter.WriteLimitedString("hello", ' ', 'z')
// 		limitedWriter.WriteLimitedString("hello", ' ', 'z')

// 		fmt.Printf("Buffer: %x\n", newBuffer.Bytes())
// 	}
// }

func test() {
	data := "B0-02-AE-00-B0-5A-7F-42-09-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-02-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01-00-01-08-03-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-04-66-66-12-42-05-01-00-04-00-00-08-00-00-00-00-00-00-80-3F-00-00-00-00-00-00-00-80-3F-00-00-00-00-00-09-00-3C-00-50-01-00-51-01"
	b, _ := hexStringToByteArray(data)
	// b := []byte{0x41, 0x04, 0x97, 0x00, 0x09, 0x00, 0x0B, 0x00, 0x45, 0x58, 0x46, 0x49, 0x4C, 0x5F, 0x5A, 0x42, 0x30, 0x31, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x44, 0x6F, 0x72, 0x6D, 0x73, 0x20, 0x56, 0x2D, 0x45, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x5A, 0x42, 0x2D, 0x31, 0x30, 0x31, 0x31, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x43, 0x72, 0x6F, 0x73, 0x73, 0x72, 0x6F, 0x61, 0x64, 0x73, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x4F, 0x6C, 0x64, 0x20, 0x47, 0x61, 0x73, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x54, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x50, 0x61, 0x72, 0x6B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x52, 0x55, 0x41, 0x46, 0x20, 0x52, 0x6F, 0x61, 0x64, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x53, 0x6D, 0x75, 0x67, 0x67, 0x6C, 0x65, 0x72, 0x27, 0x73, 0x20, 0x42, 0x6F, 0x61, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x5A, 0x42, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x00, 0x00, 0x00, 0x99, 0x14, 0x20, 0xBB, 0x02, 0xFE, 0x9F, 0x78, 0x18, 0x02, 0xCF, 0xFD, 0x6E, 0x00, 0x02, 0x34, 0x89, 0xC7, 0x5D, 0x02, 0x05, 0xE7, 0xBD, 0x45, 0x02, 0x6A, 0x72, 0x16, 0xA3, 0x02, 0x3B, 0xD0, 0x0C, 0x8B, 0x02, 0xA0, 0x5B, 0x65, 0xE8, 0x02, 0xC1, 0x6F, 0xE4, 0xA5, 0x02, 0x26, 0xFB, 0x3C, 0x03, 0x02, 0x98, 0x14, 0x20, 0xBB, 0x02, 0xFD, 0x9F, 0x78, 0x18, 0x02, 0xCE, 0xFD, 0x6E, 0x00, 0x02, 0x04, 0xE7, 0xBD, 0x45, 0x02, 0x69, 0x72, 0x16, 0xA3, 0x02, 0x3A, 0xD0, 0x0C, 0x8B, 0x02, 0x9F, 0x5B, 0x65, 0xE8, 0x02, 0xC0, 0x6F, 0xE4, 0xA5, 0x02, 0x25, 0xFB, 0x3C, 0x03, 0x02, 0x97, 0x14, 0x20, 0xBB, 0x02, 0xCD, 0xFD, 0x6E, 0x00, 0x02, 0x32, 0x89, 0xC7, 0x5D, 0x02, 0x03, 0xE7, 0xBD, 0x45, 0x02, 0x68, 0x72, 0x16, 0xA3, 0x02, 0x39, 0xD0, 0x0C, 0x8B, 0x02, 0x9E, 0x5B, 0x65, 0xE8, 0x02, 0xBF, 0x6F, 0xE4, 0xA5, 0x02, 0x24, 0xFB, 0x3C, 0x03, 0x02, 0x96, 0x14, 0x20, 0xBB, 0x02, 0xFB, 0x9F, 0x78, 0x18, 0x02, 0xCC, 0xFD, 0x6E, 0x00, 0x02, 0x38, 0xD0, 0x0C, 0x8B, 0x02, 0x9D, 0x5B, 0x65, 0xE8, 0x02, 0xBE, 0x6F, 0xE4, 0xA5, 0x02, 0x23, 0xFB, 0x3C, 0x03, 0x02, 0x9D, 0x14, 0x20, 0xBB, 0x02, 0x02, 0xA0, 0x78, 0x18, 0x02, 0xD3, 0xFD, 0x6E, 0x00, 0x02, 0x38, 0x89, 0xC7, 0x5D, 0x02, 0x09, 0xE7, 0xBD, 0x45, 0x02, 0x3F, 0xD0, 0x0C, 0x8B, 0x02, 0xA4, 0x5B, 0x65, 0xE8, 0x02, 0x2A, 0xFB, 0x3C, 0x03, 0x02, 0x9C, 0x14, 0x20, 0xBB, 0x02, 0x01, 0xA0, 0x78, 0x18, 0x03, 0xD2, 0xFD, 0x6E, 0x00, 0x03, 0x37, 0x89, 0xC7, 0x5D, 0x02, 0x08, 0xE7, 0xBD, 0x45, 0x02, 0x6D, 0x72, 0x16, 0xA3, 0x02, 0x3E, 0xD0, 0x0C, 0x8B, 0x03, 0xA3, 0x5B, 0x65, 0xE8, 0x02, 0xC4, 0x6F, 0xE4, 0xA5, 0x02, 0x29, 0xFB, 0x3C, 0x03, 0x02, 0x9B, 0x14, 0x20, 0xBB, 0x02, 0x00, 0xA0, 0x78, 0x18, 0x02, 0xD1, 0xFD, 0x6E, 0x00, 0x02, 0x36, 0x89, 0xC7, 0x5D, 0x02, 0x07, 0xE7, 0xBD, 0x45, 0x02, 0x6C, 0x72, 0x16, 0xA3, 0x02, 0x3D, 0xD0, 0x0C, 0x8B, 0x02, 0xA2, 0x5B, 0x65, 0xE8, 0x02, 0xC3, 0x6F, 0xE4, 0xA5, 0x02, 0x28, 0xFB, 0x3C, 0x03, 0x02, 0x9A, 0x14, 0x20, 0xBB, 0x02, 0xFF, 0x9F, 0x78, 0x18, 0x02, 0xD0, 0xFD, 0x6E, 0x00, 0x02, 0x35, 0x89, 0xC7, 0x5D, 0x02, 0x06, 0xE7, 0xBD, 0x45, 0x02, 0x6B, 0x72, 0x16, 0xA3, 0x02, 0x3C, 0xD0, 0x0C, 0x8B, 0x02, 0xA1, 0x5B, 0x65, 0xE8, 0x02, 0xC2, 0x6F, 0xE4, 0xA5, 0x02, 0x27, 0xFB, 0x3C, 0x03, 0x02, 0x91, 0x14, 0x20, 0xBB, 0x02, 0xF6, 0x9F, 0x78, 0x18, 0x02, 0xC7, 0xFD, 0x6E, 0x00, 0x02, 0x2C, 0x89, 0xC7, 0x5D, 0x02, 0xFD, 0xE6, 0xBD, 0x45, 0x02, 0x62, 0x72, 0x16, 0xA3, 0x02, 0x33, 0xD0, 0x0C, 0x8B, 0x02, 0x98, 0x5B, 0x65, 0xE8, 0x02, 0xB9, 0x6F, 0xE4, 0xA5, 0x02, 0x1E, 0xFB, 0x3C, 0x03, 0x02, 0x90, 0x14, 0x20, 0xBB, 0x02, 0xC6, 0xFD, 0x6E, 0x00, 0x04, 0x2B, 0x89, 0xC7, 0x5D, 0x02, 0xFC, 0xE6, 0xBD, 0x45, 0x02, 0x61, 0x72, 0x16, 0xA3, 0x04, 0x32, 0xD0, 0x0C, 0x8B, 0x02, 0x97, 0x5B, 0x65, 0xE8, 0x02, 0xB8, 0x6F, 0xE4, 0xA5, 0x02, 0x1D, 0xFB, 0x3C, 0x03, 0x02, 0x5E, 0x33, 0x67, 0x6D, 0x02, 0xF9, 0xA7, 0x0E, 0x10, 0x02, 0x94, 0x1C, 0xB6, 0xB2, 0x02, 0x2F, 0x91, 0x5D, 0x55, 0x02, 0xCA, 0x05, 0x05, 0xF8, 0x02, 0x65, 0x7A, 0xAC, 0x9A, 0x02, 0x00, 0xEF, 0x53, 0x3D, 0x02, 0x9B, 0x63, 0xFB, 0xDF, 0x02, 0x86, 0x8E, 0x2B, 0x58, 0x02, 0x21, 0x03, 0xD3, 0xFA, 0x02, 0x5D, 0x33, 0x67, 0x6D, 0x02, 0xF8, 0xA7, 0x0E, 0x10, 0x02, 0x93, 0x1C, 0xB6, 0xB2, 0x02, 0x2E, 0x91, 0x5D, 0x55, 0x02, 0xC9, 0x05, 0x05, 0xF8, 0x02, 0x64, 0x7A, 0xAC, 0x9A, 0x02, 0xFF, 0xEE, 0x53, 0x3D, 0x02, 0x9A, 0x63, 0xFB, 0xDF, 0x02, 0x85, 0x8E, 0x2B, 0x58, 0x02, 0x20, 0x03, 0xD3, 0xFA, 0x02, 0x5C, 0x33, 0x67, 0x6D, 0x02, 0xF7, 0xA7, 0x0E, 0x10, 0x02, 0x92, 0x1C, 0xB6, 0xB2, 0x02, 0x2D, 0x91, 0x5D, 0x55, 0x02, 0xC8, 0x05, 0x05, 0xF8, 0x02, 0x63, 0x7A, 0xAC, 0x9A, 0x02, 0xFE, 0xEE, 0x53, 0x3D, 0x02, 0x99, 0x63, 0xFB, 0xDF, 0x02, 0x84, 0x8E, 0x2B, 0x58, 0x02, 0x1F, 0x03, 0xD3, 0xFA, 0x02, 0xF6, 0xA7, 0x0E, 0x10, 0x02, 0x91, 0x1C, 0xB6, 0xB2, 0x02, 0x2C, 0x91, 0x5D, 0x55, 0x02, 0xC7, 0x05, 0x05, 0xF8, 0x02, 0x62, 0x7A, 0xAC, 0x9A, 0x02, 0xFD, 0xEE, 0x53, 0x3D, 0x02, 0x98, 0x63, 0xFB, 0xDF, 0x02, 0x83, 0x8E, 0x2B, 0x58, 0x02, 0x1E, 0x03, 0xD3, 0xFA, 0x02, 0x62, 0x33, 0x67, 0x6D, 0x02, 0xFD, 0xA7, 0x0E, 0x10, 0x02, 0x98, 0x1C, 0xB6, 0xB2, 0x02, 0x33, 0x91, 0x5D, 0x55, 0x02, 0xCE, 0x05, 0x05, 0xF8, 0x02, 0x69, 0x7A, 0xAC, 0x9A, 0x02, 0x04, 0xEF, 0x53, 0x3D, 0x02, 0x9F, 0x63, 0xFB, 0xDF, 0x02, 0x8A, 0x8E, 0x2B, 0x58, 0x02, 0x25, 0x03, 0xD3, 0xFA, 0x02, 0xF7, 0x90, 0xEC, 0x06, 0x03, 0x92, 0x05, 0x94, 0xA9, 0x03, 0xC1, 0xA7, 0x9D, 0xC1, 0x03, 0x5C, 0x1C, 0x45, 0x64, 0x03, 0x55, 0xD5, 0xFF, 0x36, 0x03, 0x26, 0x33, 0xF6, 0x1E, 0x03, 0x8B, 0xBE, 0x4E, 0x7C, 0x03, 0x6A, 0xAA, 0xCF, 0xBE, 0x03, 0xCF, 0x35, 0x28, 0x1C, 0x03, 0xF0, 0x49, 0xA7, 0xD9, 0x03, 0xF8, 0x90, 0xEC, 0x06, 0x03, 0x93, 0x05, 0x94, 0xA9, 0x03, 0xC2, 0xA7, 0x9D, 0xC1, 0x03, 0x5D, 0x1C, 0x45, 0x64, 0x03, 0x8C, 0xBE, 0x4E, 0x7C, 0x03, 0x27, 0x33, 0xF6, 0x1E, 0x03, 0x56, 0xD5, 0xFF, 0x36, 0x03, 0xF1, 0x49, 0xA7, 0xD9, 0x03, 0xD0, 0x35, 0x28, 0x1C, 0x03, 0x6B, 0xAA, 0xCF, 0xBE, 0x03, 0xF5, 0x90, 0xEC, 0x06, 0x03, 0x90, 0x05, 0x94, 0xA9, 0x03, 0xBF, 0xA7, 0x9D, 0xC1, 0x03, 0x5A, 0x1C, 0x45, 0x64, 0x03, 0x89, 0xBE, 0x4E, 0x7C, 0x03, 0x24, 0x33, 0xF6, 0x1E, 0x03, 0x53, 0xD5, 0xFF, 0x36, 0x03, 0xEE, 0x49, 0xA7, 0xD9, 0x03, 0xCD, 0x35, 0x28, 0x1C, 0x03, 0x68, 0xAA, 0xCF, 0xBE, 0x03, 0xF6, 0x90, 0xEC, 0x06, 0x03, 0x91, 0x05, 0x94, 0xA9, 0x03, 0xC0, 0xA7, 0x9D, 0xC1, 0x03, 0x5B, 0x1C, 0x45, 0x64, 0x03, 0x06, 0xC8, 0xE8, 0xE9, 0x02, 0x05, 0xC8, 0xE8, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	parse_input(b)

	// x := &response.WorldSpawn{}
	// x.GetDefault()
	// fmt.Printf("WorldSpawn: %v\n", x)
}
