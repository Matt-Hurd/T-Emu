package network

import (
	"bytes"
	"fmt"
	"game-server/helpers"
	"game-server/models"
	"game-server/models/game/core"
	"game-server/models/game/enums/network"
	"game-server/models/game/request"
	"game-server/models/game/response"
	"game-server/models/rpc"
	"time"

	"github.com/g3n/engine/math32"
)

func HandleDataPacket(packet *models.NetworkMessage, kcp_0 *NetworkManager) {
	dataPacket := &models.DataPacket{}
	buf := bytes.NewBuffer(packet.Buffer)
	for buf.Len() > 0 {
		err := dataPacket.Parse(buf)
		if err != nil {
			fmt.Println("Error parsing data packet:", err)
			return
		}
		switch dataPacket.GamePacketType {
		case 5:
			HandlePacketCmdRequest(dataPacket.GamePacket.(*request.PacketCmdRequest), kcp_0)
		case 35:
			HandlePacketPlayerReady(dataPacket.GamePacket.(*request.PacketClientReady), kcp_0)
		case 147:
			HandlePacketConnection(dataPacket.GamePacket.(*request.PacketConnection), kcp_0)
		case 190:
			HandlePacketProgressReport(dataPacket.GamePacket.(*request.PacketProgressReport), kcp_0)
		case 18385:
			HandlePacketHLAPIRequest(dataPacket.GamePacket.(*request.PacketHLAPIRequest), kcp_0)
		default:
			HandleUnknownPacket(dataPacket, packet)
		}
	}
}

func HandlePacketCmdRequest(packet *request.PacketCmdRequest, g *NetworkManager) {
	if packet.CmdId == int32(network.CmdSpawn) {
		bigData := []byte{0x09, 0x00, 0x0B, 0x00, 0x45, 0x58, 0x46, 0x49, 0x4C, 0x5F, 0x5A, 0x42, 0x30, 0x31, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x44, 0x6F, 0x72, 0x6D, 0x73, 0x20, 0x56, 0x2D, 0x45, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x5A, 0x42, 0x2D, 0x31, 0x30, 0x31, 0x31, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x43, 0x72, 0x6F, 0x73, 0x73, 0x72, 0x6F, 0x61, 0x64, 0x73, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x4F, 0x6C, 0x64, 0x20, 0x47, 0x61, 0x73, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x54, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x50, 0x61, 0x72, 0x6B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x52, 0x55, 0x41, 0x46, 0x20, 0x52, 0x6F, 0x61, 0x64, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x53, 0x6D, 0x75, 0x67, 0x67, 0x6C, 0x65, 0x72, 0x27, 0x73, 0x20, 0x42, 0x6F, 0x61, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x5A, 0x42, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x00, 0x00, 0x00, 0x99, 0x14, 0x20, 0xBB, 0x02, 0xFE, 0x9F, 0x78, 0x18, 0x02, 0xCF, 0xFD, 0x6E, 0x00, 0x02, 0x34, 0x89, 0xC7, 0x5D, 0x02, 0x05, 0xE7, 0xBD, 0x45, 0x02, 0x6A, 0x72, 0x16, 0xA3, 0x02, 0x3B, 0xD0, 0x0C, 0x8B, 0x02, 0xA0, 0x5B, 0x65, 0xE8, 0x02, 0xC1, 0x6F, 0xE4, 0xA5, 0x02, 0x26, 0xFB, 0x3C, 0x03, 0x02, 0x98, 0x14, 0x20, 0xBB, 0x02, 0xFD, 0x9F, 0x78, 0x18, 0x02, 0xCE, 0xFD, 0x6E, 0x00, 0x02, 0x04, 0xE7, 0xBD, 0x45, 0x02, 0x69, 0x72, 0x16, 0xA3, 0x02, 0x3A, 0xD0, 0x0C, 0x8B, 0x02, 0x9F, 0x5B, 0x65, 0xE8, 0x02, 0xC0, 0x6F, 0xE4, 0xA5, 0x02, 0x25, 0xFB, 0x3C, 0x03, 0x02, 0x97, 0x14, 0x20, 0xBB, 0x02, 0xCD, 0xFD, 0x6E, 0x00, 0x02, 0x32, 0x89, 0xC7, 0x5D, 0x02, 0x03, 0xE7, 0xBD, 0x45, 0x02, 0x68, 0x72, 0x16, 0xA3, 0x02, 0x39, 0xD0, 0x0C, 0x8B, 0x02, 0x9E, 0x5B, 0x65, 0xE8, 0x02, 0xBF, 0x6F, 0xE4, 0xA5, 0x02, 0x24, 0xFB, 0x3C, 0x03, 0x02, 0x96, 0x14, 0x20, 0xBB, 0x02, 0xFB, 0x9F, 0x78, 0x18, 0x02, 0xCC, 0xFD, 0x6E, 0x00, 0x02, 0x38, 0xD0, 0x0C, 0x8B, 0x02, 0x9D, 0x5B, 0x65, 0xE8, 0x02, 0xBE, 0x6F, 0xE4, 0xA5, 0x02, 0x23, 0xFB, 0x3C, 0x03, 0x02, 0x9D, 0x14, 0x20, 0xBB, 0x02, 0x02, 0xA0, 0x78, 0x18, 0x02, 0xD3, 0xFD, 0x6E, 0x00, 0x02, 0x38, 0x89, 0xC7, 0x5D, 0x02, 0x09, 0xE7, 0xBD, 0x45, 0x02, 0x3F, 0xD0, 0x0C, 0x8B, 0x02, 0xA4, 0x5B, 0x65, 0xE8, 0x02, 0x2A, 0xFB, 0x3C, 0x03, 0x02, 0x9C, 0x14, 0x20, 0xBB, 0x02, 0x01, 0xA0, 0x78, 0x18, 0x03, 0xD2, 0xFD, 0x6E, 0x00, 0x03, 0x37, 0x89, 0xC7, 0x5D, 0x02, 0x08, 0xE7, 0xBD, 0x45, 0x02, 0x6D, 0x72, 0x16, 0xA3, 0x02, 0x3E, 0xD0, 0x0C, 0x8B, 0x03, 0xA3, 0x5B, 0x65, 0xE8, 0x02, 0xC4, 0x6F, 0xE4, 0xA5, 0x02, 0x29, 0xFB, 0x3C, 0x03, 0x02, 0x9B, 0x14, 0x20, 0xBB, 0x02, 0x00, 0xA0, 0x78, 0x18, 0x02, 0xD1, 0xFD, 0x6E, 0x00, 0x02, 0x36, 0x89, 0xC7, 0x5D, 0x02, 0x07, 0xE7, 0xBD, 0x45, 0x02, 0x6C, 0x72, 0x16, 0xA3, 0x02, 0x3D, 0xD0, 0x0C, 0x8B, 0x02, 0xA2, 0x5B, 0x65, 0xE8, 0x02, 0xC3, 0x6F, 0xE4, 0xA5, 0x02, 0x28, 0xFB, 0x3C, 0x03, 0x02, 0x9A, 0x14, 0x20, 0xBB, 0x02, 0xFF, 0x9F, 0x78, 0x18, 0x02, 0xD0, 0xFD, 0x6E, 0x00, 0x02, 0x35, 0x89, 0xC7, 0x5D, 0x02, 0x06, 0xE7, 0xBD, 0x45, 0x02, 0x6B, 0x72, 0x16, 0xA3, 0x02, 0x3C, 0xD0, 0x0C, 0x8B, 0x02, 0xA1, 0x5B, 0x65, 0xE8, 0x02, 0xC2, 0x6F, 0xE4, 0xA5, 0x02, 0x27, 0xFB, 0x3C, 0x03, 0x02, 0x91, 0x14, 0x20, 0xBB, 0x02, 0xF6, 0x9F, 0x78, 0x18, 0x02, 0xC7, 0xFD, 0x6E, 0x00, 0x02, 0x2C, 0x89, 0xC7, 0x5D, 0x02, 0xFD, 0xE6, 0xBD, 0x45, 0x02, 0x62, 0x72, 0x16, 0xA3, 0x02, 0x33, 0xD0, 0x0C, 0x8B, 0x02, 0x98, 0x5B, 0x65, 0xE8, 0x02, 0xB9, 0x6F, 0xE4, 0xA5, 0x02, 0x1E, 0xFB, 0x3C, 0x03, 0x02, 0x90, 0x14, 0x20, 0xBB, 0x02, 0xC6, 0xFD, 0x6E, 0x00, 0x04, 0x2B, 0x89, 0xC7, 0x5D, 0x02, 0xFC, 0xE6, 0xBD, 0x45, 0x02, 0x61, 0x72, 0x16, 0xA3, 0x04, 0x32, 0xD0, 0x0C, 0x8B, 0x02, 0x97, 0x5B, 0x65, 0xE8, 0x02, 0xB8, 0x6F, 0xE4, 0xA5, 0x02, 0x1D, 0xFB, 0x3C, 0x03, 0x02, 0x5E, 0x33, 0x67, 0x6D, 0x02, 0xF9, 0xA7, 0x0E, 0x10, 0x02, 0x94, 0x1C, 0xB6, 0xB2, 0x02, 0x2F, 0x91, 0x5D, 0x55, 0x02, 0xCA, 0x05, 0x05, 0xF8, 0x02, 0x65, 0x7A, 0xAC, 0x9A, 0x02, 0x00, 0xEF, 0x53, 0x3D, 0x02, 0x9B, 0x63, 0xFB, 0xDF, 0x02, 0x86, 0x8E, 0x2B, 0x58, 0x02, 0x21, 0x03, 0xD3, 0xFA, 0x02, 0x5D, 0x33, 0x67, 0x6D, 0x02, 0xF8, 0xA7, 0x0E, 0x10, 0x02, 0x93, 0x1C, 0xB6, 0xB2, 0x02, 0x2E, 0x91, 0x5D, 0x55, 0x02, 0xC9, 0x05, 0x05, 0xF8, 0x02, 0x64, 0x7A, 0xAC, 0x9A, 0x02, 0xFF, 0xEE, 0x53, 0x3D, 0x02, 0x9A, 0x63, 0xFB, 0xDF, 0x02, 0x85, 0x8E, 0x2B, 0x58, 0x02, 0x20, 0x03, 0xD3, 0xFA, 0x02, 0x5C, 0x33, 0x67, 0x6D, 0x02, 0xF7, 0xA7, 0x0E, 0x10, 0x02, 0x92, 0x1C, 0xB6, 0xB2, 0x02, 0x2D, 0x91, 0x5D, 0x55, 0x02, 0xC8, 0x05, 0x05, 0xF8, 0x02, 0x63, 0x7A, 0xAC, 0x9A, 0x02, 0xFE, 0xEE, 0x53, 0x3D, 0x02, 0x99, 0x63, 0xFB, 0xDF, 0x02, 0x84, 0x8E, 0x2B, 0x58, 0x02, 0x1F, 0x03, 0xD3, 0xFA, 0x02, 0xF6, 0xA7, 0x0E, 0x10, 0x02, 0x91, 0x1C, 0xB6, 0xB2, 0x02, 0x2C, 0x91, 0x5D, 0x55, 0x02, 0xC7, 0x05, 0x05, 0xF8, 0x02, 0x62, 0x7A, 0xAC, 0x9A, 0x02, 0xFD, 0xEE, 0x53, 0x3D, 0x02, 0x98, 0x63, 0xFB, 0xDF, 0x02, 0x83, 0x8E, 0x2B, 0x58, 0x02, 0x1E, 0x03, 0xD3, 0xFA, 0x02, 0x62, 0x33, 0x67, 0x6D, 0x02, 0xFD, 0xA7, 0x0E, 0x10, 0x02, 0x98, 0x1C, 0xB6, 0xB2, 0x02, 0x33, 0x91, 0x5D, 0x55, 0x02, 0xCE, 0x05, 0x05, 0xF8, 0x02, 0x69, 0x7A, 0xAC, 0x9A, 0x02, 0x04, 0xEF, 0x53, 0x3D, 0x02, 0x9F, 0x63, 0xFB, 0xDF, 0x02, 0x8A, 0x8E, 0x2B, 0x58, 0x02, 0x25, 0x03, 0xD3, 0xFA, 0x02, 0xF7, 0x90, 0xEC, 0x06, 0x03, 0x92, 0x05, 0x94, 0xA9, 0x03, 0xC1, 0xA7, 0x9D, 0xC1, 0x03, 0x5C, 0x1C, 0x45, 0x64, 0x03, 0x55, 0xD5, 0xFF, 0x36, 0x03, 0x26, 0x33, 0xF6, 0x1E, 0x03, 0x8B, 0xBE, 0x4E, 0x7C, 0x03, 0x6A, 0xAA, 0xCF, 0xBE, 0x03, 0xCF, 0x35, 0x28, 0x1C, 0x03, 0xF0, 0x49, 0xA7, 0xD9, 0x03, 0xF8, 0x90, 0xEC, 0x06, 0x03, 0x93, 0x05, 0x94, 0xA9, 0x03, 0xC2, 0xA7, 0x9D, 0xC1, 0x03, 0x5D, 0x1C, 0x45, 0x64, 0x03, 0x8C, 0xBE, 0x4E, 0x7C, 0x03, 0x27, 0x33, 0xF6, 0x1E, 0x03, 0x56, 0xD5, 0xFF, 0x36, 0x03, 0xF1, 0x49, 0xA7, 0xD9, 0x03, 0xD0, 0x35, 0x28, 0x1C, 0x03, 0x6B, 0xAA, 0xCF, 0xBE, 0x03, 0xF5, 0x90, 0xEC, 0x06, 0x03, 0x90, 0x05, 0x94, 0xA9, 0x03, 0xBF, 0xA7, 0x9D, 0xC1, 0x03, 0x5A, 0x1C, 0x45, 0x64, 0x03, 0x89, 0xBE, 0x4E, 0x7C, 0x03, 0x24, 0x33, 0xF6, 0x1E, 0x03, 0x53, 0xD5, 0xFF, 0x36, 0x03, 0xEE, 0x49, 0xA7, 0xD9, 0x03, 0xCD, 0x35, 0x28, 0x1C, 0x03, 0x68, 0xAA, 0xCF, 0xBE, 0x03, 0xF6, 0x90, 0xEC, 0x06, 0x03, 0x91, 0x05, 0x94, 0xA9, 0x03, 0xC0, 0xA7, 0x9D, 0xC1, 0x03, 0x5B, 0x1C, 0x45, 0x64, 0x03, 0x06, 0xC8, 0xE8, 0xE9, 0x02, 0x05, 0xC8, 0xE8, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
		buffer := bytes.NewBuffer(bigData)
		testPacket := &response.WorldSpawn{}
		err := testPacket.Deserialize(buffer)
		if err != nil {
			panic(err)
		}

		g.SendReliableDataPacket(network.WorldSpawn, testPacket)
		g.SendReliableDataPacket(network.RPC, &response.PacketRpcResponse{
			CmdId:   int32(network.RpcGameSpawned),
			NetId:   1,
			Command: &rpc.RpcGameSpawned{},
		})

		g.SendReliableDataPacket(network.RPC, &response.PacketRpcResponse{
			CmdId: int32(network.RpcGameStarting),
			NetId: 1,
			Command: &rpc.RpcGameStarting{
				Seconds: 10,
			}})
	}
}

func HandlePacketPlayerReady(packet *request.PacketClientReady, g *NetworkManager) {
	g.SendReliableDataPacket(network.SpawnFinished, &response.PacketSpawnFinished{State: 0})
	g.SendReliableDataPacket(network.SpawnFinished, &response.PacketSpawnFinished{State: 1})

	objectSpawnPacket := response.PacketObjectSpawn{
		NetId:    1,
		Position: core.Vector3{Vector3: math32.Vector3{X: 0, Y: 0, Z: 0}},
		Payload:  []byte{},
		Rotation: core.Quaternion{
			Quaternion: math32.Quaternion{X: 0, Y: 0, Z: 0, W: 1}},
	}
	objectSpawnPacket.AssetId.FromBytes([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd})
	g.SendReliableDataPacket(network.ObjectSpawn, &objectSpawnPacket)
	g.SendReliableDataPacket(network.LocalClientAuthority, &response.PacketClientAuthority{NetId: 1, Authority: true})
	g.SendReliableDataPacket(network.RPC, &response.PacketRpcResponse{
		CmdId: int32(network.RpcSyncGameTime),
		NetId: 1,
		Command: &rpc.RpcSyncGameTime{
			Time: uint64(helpers.TimeToInt64(time.Now().Add(20 * time.Second))),
		},
	})
}

func HandlePacketProgressReport(packet *request.PacketProgressReport, g *NetworkManager) {
	fmt.Printf("Received ProgressReport: %v\n", packet)
	if packet.Progress == 1 {
		switch packet.Id {
		case 0:
			var err error
			nightmare := &response.NightMare{
				Id: 1,
			}
			nightmare.PrefabsData, err = helpers.CompressZlib([]byte(`[{"path":"assets/content/items/mods/barrels/barrel_mr43e-1c_510mm.bundle","rcid":"","FileName":"barrel_mr43e-1c_510mm"}]`))
			if err != nil {
				fmt.Println("Error compressing prefabs data:", err)
			}
			nightmare.CustomizationData, err = helpers.CompressZlib([]byte(`[]`))
			if err != nil {
				fmt.Println("Error compressing customization data:", err)
			}
			g.SendReliableDataPacket(network.NightMare, nightmare)
		}
	}
}

func HandlePacketConnection(packet *request.PacketConnection, g *NetworkManager) {
	var err error

	g.ProfileId = packet.ProfileID
	g.Token = packet.Token

	g.SendReliableDataPacket(network.ConnectionRequest, &response.PacketConnection{})

	time.Sleep(10 * time.Second)

	nightMare := &response.NightMare{
		Id: 0,
	}
	nightMare.PrefabsData, err = helpers.CompressZlib([]byte(`[{"path":"assets/content/items/mods/barrels/barrel_pl15_izhmash_112mm_threaded_9x19.bundle","rcid":"","FileName":"barrel_pl15_izhmash_112mm_threaded_9x19"},{"path":"assets/content/items/mods/silencers/silencer_all_izhmash_pl15_std_9x19.bundle","rcid":"","FileName":"silencer_all_izhmash_pl15_std_9x19"}]`))
	if err != nil {
		fmt.Println("Error compressing prefabs data:", err)
	}
	nightMare.CustomizationData, err = helpers.CompressZlib([]byte(`["66043cc27502eca33a08cad0","5e9dc97c86f774054c19ac9a"]`))
	if err != nil {
		fmt.Println("Error compressing customization data:", err)
	}
	g.SendReliableDataPacket(network.NightMare, nightMare)

}

var receivedHLAPI = false

func HandlePacketHLAPIRequest(packet *request.PacketHLAPIRequest, g *NetworkManager) {
	if !receivedHLAPI {
		receivedHLAPI = true

		start := []byte{0x0F, 0x8B, 0xC7, 0x05, 0x4D, 0x02, 0xDE, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0xD1, 0x47, 0x2E, 0x8B, 0xC7, 0x01, 0x4D, 0x02, 0xDE, 0xF1, 0x00, 0x19}
		end := []byte{0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0xBB, 0x80, 0x00, 0x00, 0x01, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x0C, 0x00, 0x01, 0x2F, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x3F, 0x02, 0x00, 0x0F, 0x00, 0x01, 0x01}
		resp := &models.DataPacket{
			GamePacketType: uint16(network.HLAPI),
			GamePacket: &response.PacketHLAPIResponse{
				Data: append(start, append([]byte(g.ProfileId), end...)...),
			},
		}
		g.SendQueue <- &models.NetworkMessage{
			Channel: models.NetworkChannelReliable,
			Type:    models.NetworkMessageTypeData,
			Buffer:  resp.Write(),
		}
	}
	receivedHLAPI = true
}

func HandleUnknownPacket(packet *models.DataPacket, packet_1 *models.NetworkMessage) {
	fmt.Printf("Unhandled Packet Type: %s, Reliable(%t), Data: %x\n", network.GetPacketType(packet.GamePacketType), packet_1.Channel == models.NetworkChannelReliable, packet_1.Buffer[4:])
}
